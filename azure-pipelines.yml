# This pipeline is triggered on pushes to the 'main' branch.
trigger:
- main

# Use a Microsoft-hosted agent running Ubuntu.
pool:
  vmImage: 'ubuntu-latest'

# Define variables to make the pipeline reusable.
variables:
  # Link our secret variable group to the pipeline
  - group: Production-Secrets

  # Define pipeline-specific variables
  - name: buildConfiguration
    value: 'Release'
  - name: azureSubscription
    value: 'Azure'                 # This MUST be the name of your Azure Resource Manager service connection.
  - name: backendAppName
    value: 'AngularDotNetMovies'      # The name of your .NET App Service in Azure.
  - name: frontendAppName
    value: 'AngularFrontEnd'         # The name of your Static Web App in Azure.
  - name: azureResourceGroup
    value: 'devops'


# The pipeline is broken into logical stages.
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build_Backend
    displayName: 'Build .NET Backend'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 9 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.x'

    - task: DotNetCoreCLI@2
      displayName: 'Build Backend'
      inputs:
        command: 'build'
        # This path now uses the exact case from your log output.
        projects: 'Movies.API/Movies.API.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Backend'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/backend'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Backend Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend'
        ArtifactName: 'backend'

  - job: Build_Frontend
    displayName: 'Build Angular Frontend'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '19.x'

    - script: |
        # Change directory into your specific Angular project folder.
        cd Movies.Frontend
        npm install
        npm run build -- --configuration production
      displayName: 'Install Dependencies and Build'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Frontend Artifact'
      inputs:
        # This path points to the build output folder as defined by your angular.json
        PathtoPublish: 'Movies.Frontend/dist/movies.frontend'
        ArtifactName: 'frontend'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build # This stage only runs if the Build stage succeeds.
  condition: succeeded()
  jobs:
  - job: Deploy_Backend
    displayName: 'Deploy Backend to App Service'
    steps:
    - task: DownloadBuildArtifacts@1
      displayName: 'Download Backend Artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'backend'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: AzureWebApp@1
      displayName: 'Deploy Backend'
      inputs:
        azureSubscription: '$(azureSubscription)'
        appType: 'webAppLinux'
        appName: '$(backendAppName)'
        package: '$(System.ArtifactsDirectory)/backend/**/*.zip'

  # CORRECTED: This section now uses the 'deployment' job type, which is best practice
  # and handles artifact paths correctly.
  - deployment: Deploy_Frontend
    displayName: 'Deploy Frontend to Static Web App'
    environment: 'production' # Tracks deployments to an environment
    strategy:
      runOnce:
        deploy:
          steps:
          # The manual DownloadBuildArtifacts task is no longer needed here.
          # A 'deployment' job automatically downloads the artifact.
          - task: AzureStaticWebApp@0
            displayName: 'Deploy Frontend'
            inputs:
              azure_static_web_apps_api_token: '$(SWA_DEPLOYMENT_TOKEN)'
              # This now correctly points to the default location where a deployment
              # job places the downloaded artifact.
              app_location: '$(Pipeline.Workspace)/frontend'
              api_location: '' # Our API is deployed separately
              output_location: ''